% generateC generates all the required C files which are required for the compilation of the mex simulation file. 
%
% USAGE:
% ======
% generateC( modelname, modelstruct)
% 
% INPUTS:
% =======
% modelname ... specifies the name of the model which will be later used for the naming of the simualation file
% modelstruct ... is the struct generated by parseModel

function iw_generateC(filename,struct)

if(~exist([cd '/models/' filename], 'dir'))
mkdir([cd '/models/' filename])
end

    if(~ispc)
        daewrap_path = strrep(which('iw_compileC.m'),'iw_compileC.m','');
    else
        daewrap_path = strrep(which('iw_compileC.m'),'iw_compileC.m','');
    end

%
%----------------------------------------------------------------
%     filename.c
% function specification
%----------------------------------------------------------------
%

nx = length(struct.sym.x);
ny = length(struct.sym.y);
np = length(struct.sym.p);
nu = length(struct.sym.u);


fid = fopen([daewrap_path 'models/' filename '/' filename '.c'],'w');
fprintf(fid,['#include "' filename '.h"\n']);
fprintf(fid,'#include <idas/idas.h>\n');
fprintf(fid,'#include <idas/idas_dense.h>\n');
fprintf(fid,'#include <nvector/nvector_serial.h>\n');
fprintf(fid,'#include <sundials/sundials_types.h>\n');
fprintf(fid,'#include <sundials/sundials_math.h>\n');
fprintf(fid,'#include <udata.h>\n');
fprintf(fid,'#include <math.h>\n');
fprintf(fid,'#include <mex.h>\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void fu_' filename '(void *user_data, double t)\n']);
fprintf(fid,'{\n');
if(nu>0);
    fprintf(fid,'  UserData data = (UserData) user_data;\n');
    fprintf(fid,'  double *p = data->par;\n');
    fprintf(fid,'  double *k = data->k;\n');
    fprintf(fid,   writeCcode(struct, 'fu'));
    fprintf(fid,'  \n');
end
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void fsu_' filename '(void *user_data, double t)\n']);
fprintf(fid,'{\n');
if(nu>0);
    fprintf(fid,'  UserData data = (UserData) user_data;\n');
    fprintf(fid,'  double *p = data->par;\n');
    fprintf(fid,'  double *k = data->k;\n');
    fprintf(fid,   writeCcode(struct, 'fsu'));
    fprintf(fid,'  \n');
end
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void fv_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,   writeCcode(struct, 'fv'));
fprintf(fid,'  \n');
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void dvdx_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,   writeCcode(struct, 'dvdx'));
fprintf(fid,'  \n');
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void dvddx_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,   writeCcode(struct, 'dvddx'));
fprintf(fid,'  \n');
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void dvdu_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data)\n']);
fprintf(fid,'{\n');
if(nu>0)
    fprintf(fid,'  UserData data = (UserData) user_data;\n');
    fprintf(fid,'  double *p = data->par;\n');
    fprintf(fid,'  double *k = data->k;\n');
    fprintf(fid,'  double *u = data->u;\n');
    fprintf(fid,   writeCcode(struct, 'dvdu'));
    fprintf(fid,'  \n');
end
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void dvdp_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data,int ip)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  switch (ip) {\n');
fprintf(fid,   writeCcode_sensi(struct, 'dvdp'));
fprintf(fid,'  }\n');
fprintf(fid,'  \n');
fprintf(fid,'  \n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' int fx_' filename '(realtype t, N_Vector x, N_Vector dx, N_Vector F, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  int is;\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *qpositivex = data->qpositivex;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *v = data->v;\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,'  double *F_tmp = N_VGetArrayPointer(F);\n');
fprintf(fid,['  fu_' filename '(data, t);\n']);
fprintf(fid,['  fv_' filename '(t, x, dx, data);\n']);
fprintf(fid,   writeCcode(struct, 'fx'));
fprintf(fid,'\n');
fprintf(fid,['  for (is=0; is<' num2str(nx) '; is++) {\n']);
fprintf(fid,'    if(mxIsNaN(F_tmp[is])) F_tmp[is] = 0.0;\n');
fprintf(fid,'  }\n');
fprintf(fid,'\n');
fprintf(fid,'  return(0);\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' int fxB_' filename '(realtype t, N_Vector x, N_Vector dx, N_Vector xB, N_Vector dxB, N_Vector xBdot, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  int is;\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,'  double *mu = N_VGetArrayPointer(xB);\n');
fprintf(fid,'  double *dmu = N_VGetArrayPointer(dxB);\n');
fprintf(fid,'  double *xBdot_tmp = N_VGetArrayPointer(xBdot);\n');
fprintf(fid,   writeCcode(struct, 'fxB'));
fprintf(fid,'\n');
fprintf(fid,['  for (is=0; is<' num2str(nx*ny) '; is++) {\n']);
fprintf(fid,'    if(mxIsNaN(xBdot_tmp[is])) xBdot_tmp[is] = 0.0;\n');
fprintf(fid,'  }\n');
fprintf(fid,'\n');
fprintf(fid,'  return(0);\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' int fxQB_' filename '(realtype t, N_Vector x, N_Vector dx, N_Vector xB, N_Vector dxB, N_Vector qBdot, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  int is;\n');
fprintf(fid,'  int ip;\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  int *plist = data->plist;\n');
fprintf(fid,'  int nps = *data->nps;\n');
fprintf(fid,'  int nobs = *data->nobs;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *dvdx = data->dvdx;\n');
fprintf(fid,'  double *dvdp = data->dvdp;\n');
fprintf(fid,'  double *dvdu = data->dvdu;\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,'  double *mu = N_VGetArrayPointer(xB);\n');
fprintf(fid,'  double *dmu = N_VGetArrayPointer(dxB);\n');
fprintf(fid,'  double *qBdot_tmp = N_VGetArrayPointer(qBdot);\n');
fprintf(fid,['  dvdx_' filename '(t, x, dx, data);\n']);
fprintf(fid,['  dvdu_' filename '(t, x, dx, data);\n']);
fprintf(fid,['  memset(qBdot_tmp,0,sizeof(double)*' num2str(ny) '*nps);\n']);
fprintf(fid,'  for(ip=0; ip<nps; ip++) {\n');
fprintf(fid,['  dvdp_' filename '(t, x, dx, data,plist[ip]);\n']);
fprintf(fid,'  switch (plist[ip]) {\n');
fprintf(fid,   writeCcode_sensi(struct, 'fxQB'));
fprintf(fid,'  }\n');
fprintf(fid,'  }\n');
fprintf(fid,'\n');
fprintf(fid,['  for (is=0; is<' num2str(ny) '*nps; is++) {\n']);
fprintf(fid,'    if(mxIsNaN(qBdot_tmp[is])) qBdot_tmp[is] = 0.0;\n');
fprintf(fid,'  }\n');
fprintf(fid,'\n');
fprintf(fid,'  return(0);\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void fx0_' filename '(N_Vector x0, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *x0_tmp = N_VGetArrayPointer(x0);\n');
fprintf(fid,   writeCcode(struct, 'fx0'));
fprintf(fid,'  \n');
fprintf(fid,'  \n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void fdx0_' filename '(N_Vector x0, N_Vector dx0, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *dx0_tmp = N_VGetArrayPointer(dx0);\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x0);\n');
fprintf(fid,   writeCcode(struct, 'fdx0'));
fprintf(fid,'  \n');
fprintf(fid,'  \n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' int DenseJacFn_' filename '(long int N, realtype t, realtype cj,\n']);
fprintf(fid,['  N_Vector x, N_Vector dx, N_Vector F,\n']);
fprintf(fid,'  	DlsMat J, void *user_data, \n');
fprintf(fid,'  	N_Vector tmp1, N_Vector tmp2, N_Vector tmp3)\n');
fprintf(fid,'{\n');
fprintf(fid,'  int is;\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *dvdx = data->dvdx;\n');
fprintf(fid,'  double *dvddx = data->dvddx;\n');
fprintf(fid,['  dvdx_' filename '(t, x, dx, data);\n']);
fprintf(fid,['  dvddx_' filename '(t, x, dx, data);\n']);
fprintf(fid,   writeCcode(struct, 'J'));
fprintf(fid,'\n');
fprintf(fid,['  for (is=0; is<' num2str(nx^2) '; is++) {\n']);
fprintf(fid,'    if(mxIsNaN(J->data[is])) J->data[is] = 0.0;\n');
fprintf(fid,'  }\n');
fprintf(fid,'\n');
fprintf(fid,'  return(0);\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' int fsx_' filename '(int nps, realtype t, N_Vector x, N_Vector dx, N_Vector F,\n']);
fprintf(fid,'   N_Vector *sx, N_Vector *sdx, N_Vector *sF, void *user_data, \n');
fprintf(fid,'  	N_Vector tmp1, N_Vector tmp2, N_Vector tmp3)\n');
fprintf(fid,'{\n');
fprintf(fid,'  int ix;\n');
fprintf(fid,'  int ip;\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  int *plist = data->plist;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *sv = data->sv;\n');
fprintf(fid,'  double *dvdx = data->dvdx;\n');
fprintf(fid,'  double *dvddx = data->dvddx;\n');
fprintf(fid,'  double *dvdu = data->dvdu;\n');
fprintf(fid,'  double *dvdp = data->dvdp;\n');
fprintf(fid,'  double *su = data->su;\n');
fprintf(fid,[' for (ip=0; ip<nps; ip++) {\n']);
fprintf(fid,'   double *sx_tmp = N_VGetArrayPointer(sx[ip]);\n');
fprintf(fid,'   double *sdx_tmp = N_VGetArrayPointer(sdx[ip]);\n');
fprintf(fid,'   double *sF_tmp = N_VGetArrayPointer(sF[ip]);\n');
fprintf(fid,['  fsu_' filename '(data, t);\n']);
fprintf(fid,['  dvdx_' filename '(t, x, dx, data);\n']);
fprintf(fid,['  dvddx_' filename '(t, x, dx, data);\n']);
fprintf(fid,['  dvdu_' filename '(t, x, dx, data);\n']);
fprintf(fid,['  dvdp_' filename '(t, x, dx, data,plist[ip]);\n']);
fprintf(fid,'   switch (plist[ip]) {\n');
fprintf(fid,   writeCcode_sensi(struct,'sensi', filename));
fprintf(fid,'   }\n');
fprintf(fid,['  for (ix=0; ix<' num2str(nx) '; ix++) {\n']);
fprintf(fid,'     if(mxIsNaN(sF_tmp[ix])) sF_tmp[ix] = 0.0;\n');
fprintf(fid,'   }\n');
fprintf(fid,'  }\n');

fprintf(fid,'\n');
fprintf(fid,'  return(0);\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void fsx0_' filename '(int ip, N_Vector sx0, N_Vector x, N_Vector dx, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  int *plist = data->plist;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *sx0_tmp = N_VGetArrayPointer(sx0);\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,['  memset(sx0_tmp,0,sizeof(double)*' num2str(nx) ');\n']);
fprintf(fid,'  switch (plist[ip]) {\n');
fprintf(fid,   writeCcode_sensi(struct, 'sensi0', filename));
fprintf(fid,'  }\n');
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,[' void fsdx0_' filename '(int ip, N_Vector sdx0,  N_Vector x, N_Vector dx, void *user_data)\n']);
fprintf(fid,'{\n');
fprintf(fid,'  UserData data = (UserData) user_data;\n');
fprintf(fid,'  double *p = data->par;\n');
fprintf(fid,'  int *plist = data->plist;\n');
fprintf(fid,'  double *k = data->k;\n');
fprintf(fid,'  double *u = data->u;\n');
fprintf(fid,'  double *sdx0_tmp = N_VGetArrayPointer(sdx0);\n');
fprintf(fid,'  double *x_tmp = N_VGetArrayPointer(x);\n');
fprintf(fid,'  double *dx_tmp = N_VGetArrayPointer(dx);\n');
fprintf(fid,['  memset(sdx0_tmp,0,sizeof(double)*' num2str(nx) ');\n']);
fprintf(fid,'  switch (plist[ip]) {\n');
fprintf(fid,   writeCcode_sensi(struct, 'sensid0', filename));
fprintf(fid,'  }\n');
fprintf(fid,'\n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,['void fy_' filename '(double t, int nt, int it, double *y, double *p, double *k, double *u, double *x){\n']);
fprintf(fid,   writeCcode(struct, 'fy'));
fprintf(fid,'    \n');
fprintf(fid,'    return;\n');
fprintf(fid,'}\n');
fprintf(fid,['void dfydp_' filename '(double t, int nt, int it, double *dydp, double *y, double *p, double *k, double *u, double *x, int *plist, int nps, int nobs){\n']);
fprintf(fid,'  \n');
fprintf(fid,'  int ip;\n');
fprintf(fid,'  for(ip =0; ip<nps; ip++) {\n');
fprintf(fid,'  switch (plist[ip]) {\n');
fprintf(fid,   writeCcode_sensi(struct, 'dfydp', filename));
fprintf(fid,'  }\n');
fprintf(fid,'  }\n');
fprintf(fid,'  \n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,['void dfydx_' filename '(double t,double *dydx, double *y, double *p, double *k, double *u, double *x){\n']);
fprintf(fid,   writeCcode(struct, 'dfydx'));
fprintf(fid,'  \n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,['void fsy_' filename '(double t, int nt, int it, int ip, int sp, int nx, int ny, double *sy, double *p, double *k, double *u, double *x, double *su, double *sx){\n']);
fprintf(fid,'  switch (ip) {\n');
fprintf(fid,   writeCcode_sensi(struct, 'sensiy', filename));
fprintf(fid,'  }\n');
fprintf(fid,'  \n');
fprintf(fid,'  return;\n');
fprintf(fid,'}\n');
fclose(fid);

%
%----------------------------------------------------------------
%     filename.h
% function definitions
%----------------------------------------------------------------
%

str_hfile = [...
'#ifndef _MY_' filename '\n'...
'#define _MY_' filename '\n'...
'\n'...
'#include <idas/idas.h>\n'...
'#include <idas/idas_dense.h>\n'...
'#include <nvector/nvector_serial.h>\n'...
'#include <sundials/sundials_types.h>\n'...
'#include <sundials/sundials_math.h>\n'...
'#include <udata.h>\n'...
'#include <math.h>\n'...
'#include <mex.h>\n'...
'\n'...
'             void fu_' filename '(void *user_data, double t);\n'...
'             void fsu_' filename '(void *user_data, double t);\n'...
'             void fv_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data);\n'...
'             void dvdx_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data);\n'...
'             void dvddx_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data);\n'...
'             void dvdu_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data);\n'...
'             void dvdp_' filename '(realtype t, N_Vector x, N_Vector dx, void *user_data, int ip);\n'...
'             void fx0_' filename '(N_Vector x0, void *user_data);\n'...
'             void fdx0_' filename '(N_Vector x0, N_Vector dx0, void *user_data);\n'...
'             int DenseJacFn_' filename '(long int N, realtype t, realtype cj, N_Vector x, N_Vector dx, N_Vector F, DlsMat J, void *user_data, N_Vector tmp1, N_Vector tmp2, N_Vector tmp3);\n'...
'             int fsx_' filename '(int nps, realtype t, N_Vector x, N_Vector dx, N_Vector F, N_Vector *sx, N_Vector *sdx, N_Vector *sF, void *user_data,N_Vector tmp1, N_Vector tmp2, N_Vector tmp3);\n'...
'             void fsx0_' filename '(int ip, N_Vector sx0, N_Vector x, N_Vector dx, void *user_data);\n'...
'             void fsdx0_' filename '(int ip, N_Vector sdx0, N_Vector x, N_Vector dx, void *user_data);\n'...
'             void fy_' filename '(double t, int nt, int it, double *y, double *p, double *k, double *u, double *x);\n'...
'             void dfydp_' filename '(double t, int nt, int it, double *dydp, double *y, double *p, double *k, double *u, double *x, int *plist, int nps, int nobs);\n'...
'             void dfydx_' filename '(double t, double *dydx, double *y, double *p, double *k, double *u, double *x);\n'...
'             void fsy_' filename '(double t, int nt, int it, int ip, int sp, int nx, int ny, double *sy, double *p, double *k, double *u, double *x, double *su, double *sx);\n'...
'\n'...
'\n'...
'#endif /* _MY_' filename ' */\n'...
             ];

% write the string to the file
fid = fopen([daewrap_path 'models/' filename '/' filename '.h'],'w');
fprintf(fid,str_hfile);
fclose(fid);

%
%----------------------------------------------------------------
%     idawrapfunctions.c
% this file does the dynamic mapping of the universal function calls from
% idawrap.c to individual model function calls
%----------------------------------------------------------------
%

str_funcfile = [...
                '#include "' filename '.c"\n'...
                '                \n'...
                '                int idawrap_init(void *ida_mem, N_Vector x, N_Vector dx, double t){\n'...
                '                    return IDAInit(ida_mem, fx_' filename ', RCONST(t), x, dx);\n'...
                '                }\n'...
                '                int idawrap_binit(void *ida_mem, int which, N_Vector xB, N_Vector dxB, double t){\n'...
                '                    return IDAInitB(ida_mem, which, fxB_' filename ', RCONST(t), xB, dxB);\n'...
                '                }\n'...
                '                int idadewrap_qbinit(void *ida_mem, int which, N_Vector xQB){\n'...
                '                    return IDAQuadInitB(ida_mem, which, fxQB_' filename ', xQB);\n'...
                '                }\n'...
                '                \n'...
                '                void fx0(N_Vector x0, void *user_data){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    fx0_' filename '(x0, data);\n'...
                '                }\n'...
                '                \n'...
                '                void fdx0(N_Vector x0, N_Vector dx0, void *user_data){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    fdx0_' filename '(x0, dx0, data);\n'...
                '                }\n'...
                '                \n'...
                '                int idawrap_SetDenseJacFn(void *ida_mem){\n'...
                '                    return IDADlsSetDenseJacFn(ida_mem, DenseJacFn_' filename ');\n'...
                '                }\n'...
                '                \n'...
                '                void fsx0(int is, N_Vector sx_is, N_Vector x, N_Vector dx, void *user_data){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    fsx0_' filename '(is, sx_is, x, dx, data);\n'...
                '                }\n'...
                '                void fsdx0(int is, N_Vector sdx_is, N_Vector x, N_Vector dx, void *user_data){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    fsdx0_' filename '(is, sdx_is, x, dx, data);\n'...
                '                }\n'...
                '                \n'...
                '                int idawrap_SensInit(void *ida_mem, int nps, int sensi_meth, N_Vector *sx, N_Vector *sdx){\n'...
                '                    return IDASensInit(ida_mem, nps, sensi_meth, fsx_' filename ', sx, sdx);\n'...
                '                }\n'...
                '                \n'...
                '                void fu(void *user_data, double t){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    fu_' filename '(data, t);\n'...
                '                }\n'...
                '                \n'...
                '                void fsu(void *user_data, double t){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    fsu_' filename '(data, t);\n'...
                '                }\n'...
                '                \n'...
                '                void fv(void *user_data, double t, N_Vector x, N_Vector dx){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    fv_' filename '(t, x, dx, data);\n'...
                '                }\n'...
                '                \n'...
                '                void fsv(void *user_data, double t, N_Vector x, N_Vector dx){\n'...
                '                    UserData data = (UserData) user_data;\n'...
                '                    dvdu_' filename '(t, x, dx, data);\n'...
                '                    dvdx_' filename '(t, x, dx, data);\n'...
                '                    \n'...
                '                }\n'...
                '                \n'...
                '                void fy(double t, int nt, int it, double *y, double *p, double *k, double *u, double *x){\n'...
                '                    fy_' filename '(t, nt, it, y, p, k, u, x);\n'...
                '                }\n'...
                '                void dfydp(double t, int nt, int it,double *dydp, double *y, double *p, double *k, double *u, double *x, int *plist, int nps, int nobs){\n'...
                '                    dfydp_' filename '(t, nt, it, dydp, y, p, k, u, x, plist, nps, nobs);\n'...
                '                }\n'...
                '                void dfydx(double t,double *dydx, double *y, double *p, double *k, double *u, double *x){\n'...
                '                    dfydx_' filename '(t, dydx, y, p, k, u, x);\n'...
                '                }\n'...
                '                \n'...
                '                void fsy(double t, int nt, int it, int *plist, int nx, int ny, int nps, double *sy, double *p, double *k, double *u, double *x, double *su, double *sx){\n'...
                '                    int ip;\n;'...
                '                    for (ip=0; ip<nps; ip++) {\n'...
                '                        fsy_' filename '(t, nt, it, plist[ip], ip,  nx, ny,  sy, p, k, u, x, su, sx);\n'...
                '                    }\n'...
                '                }\n'...
                ];

% write the string to the file
fid = fopen([daewrap_path 'models/' filename '/idawrapfunctions.c'],'w');
fprintf(fid,str_funcfile);
fclose(fid);

end


function [str] = writeCcode_sensi(struct,svar,filename)
    
    cstr = '';
    if(strcmp(svar,'sensi'))
        for j2=1:size(struct.sym.fsv,2)
                cstr = [cstr...
                    '  case ' num2str(j2-1) ': {\n'...
                    writeCcode(struct,'fsv', j2)...
                    '\n'...
                    '  } break;\n\n'];
        end
    elseif(strcmp(svar,'sensi0'))
        for j2=1:size(struct.sym.fsv,2)
                cstr = [cstr...
                    '  case ' num2str(j2-1) ': {\n'...
                    writeCcode(struct,'fsx0', j2)...
                    '\n'...
                    '  } break;\n\n'];
        end
    elseif(strcmp(svar,'sensid0'))
        for j2=1:size(struct.sym.fsdx0,2)
                cstr = [cstr...
                    '  case ' num2str(j2-1) ': {\n'...
                    writeCcode(struct,'fsdx0', j2)...
                    '\n'...
                    '  } break;\n\n'];
        end
    elseif(strcmp(svar,'sensiy'))
        for j2=1:size(struct.sym.fsv,2)
                cstr = [cstr...
                    '  case ' num2str(j2-1) ': {\n'...
                    writeCcode(struct,'fsy', j2)...
                    '\n'...
                    '  } break;\n\n'];
        end 
    elseif(strcmp(svar,'dvdp'))
        for j2=1:size(struct.sym.dfvdp,2)
                cstr = [cstr...
                    '  case ' num2str(j2-1) ': {\n'...
                    writeCcode(struct,'dvdp', j2)...
                    '\n'...
                    '  } break;\n\n'];
        end
    elseif(strcmp(svar,'fxQB'))
        for j2=1:size(struct.sym.int,2)
                cstr = [cstr...
                    '  case ' num2str(j2-1) ': {\n'...
                    writeCcode(struct,'fxQB', j2)...
                    '\n'...
                    '  } break;\n\n'];
        end
    elseif(strcmp(svar,'dfydp'))
        for j2=1:size(struct.sym.int,2)
                cstr = [cstr...
                    '  case ' num2str(j2-1) ': {\n'...
                    writeCcode(struct,'dydp', j2)...
                    '\n'...
                    '  } break;\n\n'];
        end
    end
    if(isempty(cstr))
        str = '';
    else
        str = cstr;
    end
    
    
end


function [str] = writeCcode(struct, svar,ip)
    
    if(strcmp(svar,'fv'))
        cstr = ccode(struct.sym.fv(:));
        cvar =  'data->v';
    elseif(strcmp(svar,'dvdx'))
        cstr = ccode(struct.sym.dfvdx(:));
        cvar =  'data->dvdx';
    elseif(strcmp(svar,'dvddx'))
        cstr = ccode(struct.sym.dfvddx(:));
        cvar =  'data->dvddx';
    elseif(strcmp(svar,'dvdu'))
        if(~isempty(struct.sym.fu(:)))
            cstr = ccode(struct.sym.dfvdu(:));
            cvar =  'data->dvdu';
        else
            cvar =  'data->dvdu';
            cstr = char.empty(0,1);
        end
    elseif(strcmp(svar,'dvdp'))
        if(any(struct.sym.dfvdp(:,ip)~=0))
            cstr = ccode(struct.sym.dfvdp(:,ip));
            cstr = [sprintf(['  memset(data->dvdp,0,sizeof(double)*' num2str(numel(struct.sym.dfvdp(:,ip))) ');\n']) cstr];
            cvar =  'data->dvdp';
        else
            cstr = char.empty(0,1);
            cvar =  'data->dvdp';
        end
    elseif(strcmp(svar,'fx'))
        cstr = ccode(struct.sym.fx(:));
        cstr = [sprintf(['  memset(F_tmp,0,sizeof(double)*' num2str(numel(struct.sym.fx(:))) ');\n']) cstr];
        cvar =  'F_tmp';
    elseif(strcmp(svar,'fx0'))
        cstr = ccode(struct.sym.fpx0(:));
        cvar =  'x0_tmp';
    elseif(strcmp(svar,'fdx0'))
        cstr = ccode(struct.sym.fpdx0(:));
        cvar =  'dx0_tmp';
    elseif(strcmp(svar,'J'))
        cstr = ccode(struct.sym.J(:));
        cstr = [sprintf(['  memset(J->data,0,sizeof(double)*' num2str(numel(struct.sym.dfxdx(:))) ');\n']) cstr];
        cvar =  'J->data';
    elseif(strcmp(svar,'fsv'))
        cstr = ccode(struct.sym.fsv(:,ip));
        cstr = [sprintf(['  memset(sF_tmp,0,sizeof(double)*' num2str(numel(struct.sym.fsv(:,ip))) ');\n']) cstr];
        cvar =  'sF_tmp';
    elseif(strcmp(svar,'fsx0'))
        if(any(struct.sym.fsx0(:,ip)~=0))
            cstr = ccode(struct.sym.fsx0(:,ip));
            cvar =  'sx0_tmp';
        else
            cstr = char.empty(0,1);
            cvar =  'sx0_tmp';
        end
    elseif(strcmp(svar,'fsdx0'))
        if(any(struct.sym.fsdx0(:,ip)~=0))
            cstr = ccode(struct.sym.fsdx0(:,ip));
            cvar =  'sdx0_tmp';
        else
            cstr = char.empty(0,1);
            cvar =  'sdx0_tmp';
        end
    elseif(strcmp(svar,'fu'))
        if(~isempty(struct.sym.fu(:)))
            cstr = ccode(struct.sym.fu(:));
            cvar =  'data->u';
        else 
            cvar =  'data->u';
            cstr = char.empty(0,1);
        end
    elseif(strcmp(svar,'fsu'))
        if(~isempty(struct.sym.fu(:)))
            cstr = ccode(struct.sym.dfudp(:));
            cvar =  'data->su';
        else
            cvar =  'data->u';
            cstr = char.empty(0,1);
        end
    elseif(strcmp(svar,'fy'))
        cstr = ccode(struct.sym.fy(:));
        cvar =  'y';
    elseif(strcmp(svar,'dfydx'))
        cstr = ccode(struct.sym.mu0(:));
        cstr = [sprintf(['  memset(dydx,0,sizeof(double)*' num2str(numel(struct.sym.dfydx(:))) ');\n']) cstr];
        cvar =  'dydx';
    elseif(strcmp(svar,'fsy'))
        cstr = ccode(struct.sym.fsy(:,ip));
        cvar =  'sy';
    elseif(strcmp(svar,'fxB'))
        cstr = ccode(struct.sym.mudot(:));
        cvar =  'xBdot_tmp';
    elseif(strcmp(svar,'fxQB'))
        if(any(struct.sym.int(:,ip)~=0))
            cstr = ccode(struct.sym.int(:,ip));
            cvar =  'qBdot_tmp';
        else
            cstr = char.empty(0,1);
            cvar =  'qBdot_tmp';
        end
    elseif(strcmp(svar,'dydp'))
        if(any(struct.sym.dfydp(:,ip)~=0))
            cstr = ccode(struct.sym.dfydp(:,ip));
            cvar =  'dydp';
        else
            cstr = char.empty(0,1);
            cvar =  'dydp';
        end
    end
    cstr = strrep(cstr, 't0', [cvar '[0]']);
    cstr = strrep(cstr, '][0]', ']');
    cstr = strrep(cstr, 'T', cvar);
    if(strcmp(cvar,'qBdot_tmp'))
        if(~isempty(cstr))
            cstr = regexprep(cstr,'qBdot_tmp\[([0-9]*)\]','qBdot_tmp\[$1+ip*nobs]');
        end
    elseif(strcmp(cvar,'dydp'))
        if(~isempty(cstr))
            cstr = regexprep(cstr,'dydp\[([0-9]*)\]','dydp\[it + nt*($1+ip*nobs)]');
        end
    end
    
    if(~(length(cstr)==1 && isempty(cstr{1})))
        if(strcmp(svar,'fy') || strcmp(svar,'fsy') || strcmp(svar,'dydp'))
            if(strcmp(svar,'fy') || strcmp(svar,'dydp'))
                cstr = strrep(cstr, 'x[', 'x[it+nt*');
                cstr = strrep(cstr, 'y[', 'y[it+nt*');
            else
                cstr = regexprep(cstr,'sx\[([0-9]*)\]','sx\[it+nt*\($1+sp*nx\)\]');
                cstr = regexprep(cstr,'sy\[([0-9]*)\]','sy\[it+nt*\($1+sp*ny\)\]');
                cstr = regexprep(cstr,'y\[([0-9]*)\]','y\[it+nt*$1\]');
                cstr = regexprep(cstr,'x\[([0-9]*)\]','x\[it+nt*$1\]');
            end
            cstr = strrep(cstr, 'u[', 'u[it+nt*');
        elseif(strcmp(cvar,'dydx'))
            % do nothing
        else
            cstr = strrep(cstr, 'x[', 'x_tmp[');
            cstr = strrep(cstr, 'dvdx_tmp', 'dvdx');
            cstr = strrep(cstr, 'dvddx_tmp', 'dvddx');
        end
    end
    
    if(isempty(cstr))
        str = char.empty(0,1);
    else
        str = cstr;
    end
    
end