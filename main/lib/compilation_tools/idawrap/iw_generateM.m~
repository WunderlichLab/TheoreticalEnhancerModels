% generateM generates the matlab wrapper for the mex files which simplifies the calling of the mex simulation file
%
% USAGE:
% ======
% generateM( modelname, modelstruct)
%
% INPUTS:
% =======
% modelname ... specifies the name of the model which will be later used for the naming of the simualation file
% modelstruct ... is the struct generated by parseModel

function iw_generateM( filename, struct )
%GENERATEM Summary of this function goes here
%   Detailed explanation goes here

if(~ispc)
    daewrap_path = strrep(which('iw_compileC.m'),'iw_compileC.m','');
else
    daewrap_path = strrep(which('iw_compileC.m'),'iw_compileC.m','');
end

nmx = struct.sym.nmx;
nx = length(struct.sym.x);
ny = length(struct.sym.y);
np = length(struct.sym.p);
nk = length(struct.sym.k);
nk1 = struct.sym.nk1;
nu = length(struct.sym.u);
nv = length(struct.sym.f);

%% FSA

fid = fopen([daewrap_path 'models/' filename '/simulate_' filename '.m'],'w');
%fprintf(fid,['function varargout = simulate_' filename '(tout,phi,kappa,sens_ind)\n\n']);
fprintf(fid,['%% simulate_' filename '.m is the matlab interface to the idas mex\n'...
    '%%   which simulates the differential algebraic equations and respective\n'...
    '%%   sensitivities according to user specifications.\n'...
    '%%\n'...
    '%% USAGE:\n'...
    '%% ======\n'...
    '%% [...] = simulate_' filename '(tout,theta)\n'...
    '%% [...] = simulate_' filename '(tout,theta,kappa,options)\n'...
    '%% sol = simulate_' filename '(...)\n'...
    '%% [status,tout,x,dx,mx,y,sx,sdx,smx,sy] = simulate_' filename '(...)\n'...
    '%%\n'...
    '%% INPUTS:\n'...
    '%% =======\n'...
    '%% tout ... 1 dimensional vector of timepoints at which a solution to the ODE is desired\n'...
    '%% theta ... 1 dimensional parameter vector of parameters for which sensitivities are desired.\n'...
    '%%           this corresponds to the specification in model.sym.p\n'...
    '%% kappa ... 1 dimensional parameter vector of parameters for which sensitivities are not desired.\n'...
    '%%           this corresponds to the specification in model.sym.k\n'...
    '%%           Arbitrary initial conditions can be provided in kappa (see ACME/doc/ACME_doc.pdf for detailed instructions).\n'...
    '%%\n'...
    '%% Outputs:\n'...
    '%% ========\n'...
    '%% sol.status ... flag for status of integration. generally status<0 for failed integration\n'...
    '%% sol.tout ... vector at which the solution was computed\n'...
    '%% sol.x ... time-resolved state vector\n'...
    '%% sol.dx ... time-resolved vector of state derivatives\n'...
    '%% sol.mx ... time-resolved vector of the overall moments of species\n'...
    '%% sol.y ... time-resolved output vector\n'...
    '%% sol.sx ... time-resolved state sensitivity vector\n'...
    '%% sol.sdx ... time-resolved sensitivity vector of state derivatives\n'...
    '%% sol.smx ... time-resolved sensitivity vector of the overall moments of species\n'...
    '%% sol.sy ... time-resolved output sensitivity vector\n'...
    'function varargout = simulate_' filename '(varargin)\n\n'...
    '%% DO NOT CHANGE ANYTHING IN THIS FILE UNLESS YOU ARE VERY SURE ABOUT WHAT YOU ARE DOING\n'...
    '%% MANUAL CHANGES TO THIS FILE CAN RESULT IN WRONG SOLUTIONS AND CRASHING OF MATLAB\n']);
fprintf(fid,['if(nargin<2)\n']);
fprintf(fid,['error(''Not enough input arguments.'');\n']);
fprintf(fid,['else\n']);
fprintf(fid,['tout=varargin{1};\n']);
fprintf(fid,['phi=varargin{2};\n']);
fprintf(fid,['end\n']);

fprintf(fid,['if(nargin>=3)\n']);
fprintf(fid,['    kappa=varargin{3};\n']);
fprintf(fid,['   if(length(kappa)==',num2str(nk1),')\n']);
fprintf(fid,['    kappa(',num2str(nk1+1),':',num2str(nk),')=0;\n']);
fprintf(fid,['   end\n']);
fprintf(fid,['else\n']);
fprintf(fid,['    kappa=zeros(1,',num2str(nk),');\n']);
fprintf(fid,['end\n']);


if(isfield(struct,'param'))
    switch(struct.param)
        case 'log'
            fprintf(fid,'theta = exp(phi);\n\n');
        case 'log10'
            fprintf(fid,'theta = 10.^(phi);\n\n');
        case 'lin'
            fprintf(fid,'theta = phi;\n\n');
        otherwise
            disp('No valid parametrisation chosen! Valid options are "log","log10" and "lin". Using linear parametrisation (default)!')
            fprintf(fid,'theta = phi;\n\n');
    end
else
    disp('No parametrisation chosen! Using linear parametrisation (default)!')
    fprintf(fid,'theta = phi;\n\n');
end
fprintf(fid,'persistent old_theta old_tout old_kappa\n');
fprintf(fid,'persistent ncount\n');
fprintf(fid,'persistent old_status old_t old_x old_y old_sx old_sy\n');
fprintf(fid,'\n');
fprintf(fid,'try\n');
fprintf(fid,'    if(all(all(tout==old_tout),all(theta==old_theta),all(kappa==old_kappa)))\n');
fprintf(fid,'        status = old_status;\n');
fprintf(fid,'        t = old_t;\n');
fprintf(fid,'        x = old_x;\n');
fprintf(fid,'        y = old_y;\n');
fprintf(fid,'        if(nargout>4)\n');
fprintf(fid,'            sx = old_sx;\n');
fprintf(fid,'            sy = old_sy;\n');
fprintf(fid,'        end\n');
fprintf(fid,'        ncount = ncount + 1;\n');
fprintf(fid,'    if ncount > 5\n');
fprintf(fid,'        % check wether we are stuck\n');
fprintf(fid,'        status = -1;\n');
fprintf(fid,'    end\n');
fprintf(fid,'        return\n');
fprintf(fid,'    end\n');
fprintf(fid,'    \n');
fprintf(fid,'catch\n');
fprintf(fid,'end\n');
fprintf(fid,'\n');


fprintf(fid,['options_ida.sens_ind = 1:' num2str(np) ';\n']);
fprintf(fid,['options_ida.idas_atol = ' num2str(struct.atol) ';\n']);
fprintf(fid,['options_ida.idas_rtol = ' num2str(struct.atol) ';\n']);
fprintf(fid,['options_ida.idas_maxsteps = ' num2str(struct.maxsteps) ';\n']);

fprintf(fid,['options_ida.xs = ones(' num2str(nx) ',1);\n']);
fprintf(fid,['options_ida.ys = ones(1,' num2str(ny) ');\n']);
fprintf(fid,['options_ida.tstart = ' num2str(struct.t0) ';\n\n']);

fprintf(fid,'options_ida.qPositiveX = zeros(size(options_ida.xs));\n');
fprintf(fid,['options_ida.uNum = zeros(1,' num2str(nu) ');\n']);
fprintf(fid,['options_ida.vNum = zeros(1,' num2str(nv) ');\n']);
fprintf(fid,['options_ida.dvdxNum = zeros(' num2str(nx) ',' num2str(nx) ');\n']);
fprintf(fid,['options_ida.dvddxNum = zeros(' num2str(nx) ',' num2str(nx) ');\n']);
fprintf(fid,['options_ida.dvduNum = zeros(' num2str(nx) ',' num2str(nu) ');\n']);
fprintf(fid,['options_ida.dvdpNum = zeros(' num2str(nx) ',1);\n']);
fprintf(fid,['options_ida.svNum = zeros(1,' num2str(nx) ');\n\n']);
fprintf(fid,['options_ida.id = transpose([' num2str(transpose(struct.id)) ']);\n\n']);
fprintf(fid,['options_ida.sensi = 0;\n']);


fprintf(fid,['if(nargin>=4)\n']);
fprintf(fid,['options_ida=setdefault(varargin{4},options_ida);\n']);
%fprintf(fid,['else\n']);
%fprintf(fid,['sens_ind = 1:' num2str(np) ';\n']);
fprintf(fid,['end\n']);
fprintf(fid,['sens_ind = options_ida.sens_ind;\n']);
fprintf(fid,['if(max(sens_ind)>length(theta))\n']);
fprintf(fid,['    error(''Sensitivity index exceeds parameter dimension!'')\n']);
fprintf(fid,['end\n']);
fprintf(fid,['options_ida.ps = ones(1,length(sens_ind));\n']);
fprintf(fid,['options_ida.suNum = zeros(' num2str(nu) ',length(sens_ind));\n']);

fprintf(fid,'if(nargout==1)\n');
fprintf(fid,['   if (options_ida.sensi) > 0\n']);
fprintf(fid,['    [status,t,x,dx,y,sx,sdx,sy] = ' filename '(tout,theta(1:' num2str(np) '),kappa(1:' num2str(nk) '),options_ida,sens_ind-1);\n']);
if(isfield(struct,'param'))
    switch(struct.param)
        case 'log'
            fprintf(fid,['    Sx = bsxfun(@times,sx,permute(theta(sens_ind),[3,2,1]));\n']);
            fprintf(fid,['    Sdx = bsxfun(@times,sdx,permute(theta(sens_ind),[3,2,1]));\n']);
            fprintf(fid,['    Sy = bsxfun(@times,sy,permute(theta(sens_ind),[3,2,1]));\n']);
        case 'log10'
            fprintf(fid,['    Sx = bsxfun(@times,sx,permute(theta(sens_ind),[3,2,1])*log(10));\n']);
            fprintf(fid,['    Sdx = bsxfun(@times,sdx,permute(theta(sens_ind),[3,2,1])*log(10));\n']);
            fprintf(fid,['    Sy = bsxfun(@times,sy,permute(theta(sens_ind),[3,2,1])*log(10));\n']);
        case 'lin'
            fprintf(fid,'    Sx = sx;\n');
            fprintf(fid,'    Sdx = sdx;\n');
            fprintf(fid,'    Sy = sy;\n');
        otherwise
            fprintf(fid,'    Sx = sx;\n');
            fprintf(fid,'    Sdx = sdx;\n');
            fprintf(fid,'    Sy = sy;\n');
    end
else
    fprintf(fid,'    Sx = sx;\n');
    fprintf(fid,'    Sdx = sdx;\n');
    fprintf(fid,'    Sy = sy;\n');
end
fprintf(fid,'    sol.status = status;\n');
fprintf(fid,'    sol.t = t;\n');
fprintf(fid,'    sol.x = x;\n');
fprintf(fid,'    sol.dx = dx;\n');
fprintf(fid,['    sol.mx = y(:,1:',num2str(nmx),');\n']);
fprintf(fid,['    sol.y = y(:,',num2str(nmx+1),':end);\n']);
fprintf(fid,'    sol.theta = theta;\n');
fprintf(fid,'    sol.kappa = kappa;\n');
fprintf(fid,'    varargout{1} = sol;\n');
fprintf(fid,'    varargout{7} = Sx;\n');
fprintf(fid,'    varargout{8} = Sdx;\n');
% if nmx > 0
    fprintf(fid,['    varargout{9} = Sy(:,1:',num2str(nmx),',:);\n']);
    fprintf(fid,['    varargout{10} = Sy(:,',num2str(nmx+1),':end,:);\n']);
fprintf(fid,['   else\n']);
fprintf(fid,['    [status,t,x,dx,y] = ' filename '(tout,theta(1:' num2str(np) '),kappa(1:' num2str(nk) '),options_ida,sens_ind-1);\n']);
fprintf(fid,'    sol.status = status;\n');
fprintf(fid,'    sol.t = t;\n');
fprintf(fid,'    sol.x = x;\n');
fprintf(fid,'    sol.dx = dx;\n');
fprintf(fid,['    sol.mx = y(:,1:',num2str(nmx),');\n']);
fprintf(fid,['    sol.y = y(:,',num2str(nmx+1),':end);\n']);
fprintf(fid,'    sol.theta = theta;\n');
fprintf(fid,'    sol.kappa = kappa;\n');
fprintf(fid,'    varargout{1} = sol;\n');
fprintf(fid,['   end;\n']);

fprintf(fid,'elseif(nargout<=6)\n');
fprintf(fid,['    [status,t,x,dx,y] = ' filename '(tout,theta(1:' num2str(np) '),kappa(1:' num2str(nk) '),options_ida,sens_ind-1);\n']);
fprintf(fid,'       varargout{1} = status;\n');
fprintf(fid,'       varargout{2} = t;\n');
fprintf(fid,'       varargout{3} = x;\n');
fprintf(fid,'       varargout{4} = dx;\n');
% if nmx > 0
fprintf(fid,['       varargout{5} = y(:,1:',num2str(nmx),');\n']);
fprintf(fid,['       varargout{6} = y(:,',num2str(nmx+1),':end);\n']);
% else
%     fprintf(fid,'       varargout{5} = y;\n');
% end
%fprintf(fid,'   end\n');
fprintf(fid,'else\n');
fprintf(fid,['    [status,t,x,dx,y,sx,sdx,sy] = ' filename '(tout,theta(1:' num2str(np) '),kappa(1:' num2str(nk) '),options_ida,sens_ind-1);\n']);
fprintf(fid,'    varargout{1} = status;\n');
fprintf(fid,'    varargout{2} = t;\n');
fprintf(fid,'    varargout{3} = x;\n');
fprintf(fid,'    varargout{4} = dx;\n');
% if nmx > 0
fprintf(fid,['    varargout{5} = y(:,1:',num2str(nmx),');\n']);
fprintf(fid,['    varargout{6} = y(:,',num2str(nmx+1),':end);\n']);
% else
%     fprintf(fid,'    varargout{5} = y;\n');
% end
if(isfield(struct,'param'))
    switch(struct.param)
        case 'log'
            fprintf(fid,['    Sx = bsxfun(@times,sx,permute(theta(sens_ind),[3,2,1]));\n']);
            fprintf(fid,['    Sdx = bsxfun(@times,sdx,permute(theta(sens_ind),[3,2,1]));\n']);
            fprintf(fid,['    Sy = bsxfun(@times,sy,permute(theta(sens_ind),[3,2,1]));\n']);
        case 'log10'
            fprintf(fid,['    Sx = bsxfun(@times,sx,permute(theta(sens_ind),[3,2,1])*log(10));\n']);
            fprintf(fid,['    Sdx = bsxfun(@times,sdx,permute(theta(sens_ind),[3,2,1])*log(10));\n']);
            fprintf(fid,['    Sy = bsxfun(@times,sy,permute(theta(sens_ind),[3,2,1])*log(10));\n']);
        case 'lin'
            fprintf(fid,'    Sx = sx;\n');
            fprintf(fid,'    Sdx = sdx;\n');
            fprintf(fid,'    Sy = sy;\n');
        otherwise
            fprintf(fid,'    Sx = sx;\n');
            fprintf(fid,'    Sdx = sdx;\n');
            fprintf(fid,'    Sy = sy;\n');
    end
else
    fprintf(fid,'    Sx = sx;\n');
    fprintf(fid,'    Sdx = sdx;\n');
    fprintf(fid,'    Sy = sy;\n');
end
fprintf(fid,'    varargout{7} = Sx;\n');
fprintf(fid,'    varargout{8} = Sdx;\n');
% if nmx > 0
    fprintf(fid,['    varargout{9} = Sy(:,1:',num2str(nmx),',:);\n']);
    fprintf(fid,['    varargout{10} = Sy(:,',num2str(nmx+1),':end,:);\n']);
% else
%     fprintf(fid,'    varargout{8} = Sy;\n');
% end
fprintf(fid,'end\n');

fprintf(fid,'old_status = status;\n');
fprintf(fid,'old_t = t;\n');
fprintf(fid,'old_x = x;\n');
fprintf(fid,'old_y = y;\n');
fprintf(fid,'if(nargout>6)\n');
fprintf(fid,'    old_sx = sx;\n');
fprintf(fid,'    old_sy = sy;\n');
fprintf(fid,'end\n');
fprintf(fid,'old_theta = theta;\n');
fprintf(fid,'old_kappa = kappa;\n');
fprintf(fid,'old_tout = tout;\n');
fprintf(fid,'end\n');

fclose(fid);
addpath([daewrap_path 'models/' filename '/'])

end

